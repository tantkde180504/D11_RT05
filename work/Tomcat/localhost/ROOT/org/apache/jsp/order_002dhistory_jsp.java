/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2025-06-27 00:37:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class order_002dhistory_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("    <html lang=\"vi\">\r\n");
      out.write("\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta charset=\"UTF-8\">\r\n");
      out.write("        <title>Lịch sử đơn hàng</title>\r\n");
      out.write("        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("        <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("        <link href=\"css/order-history.css\" rel=\"stylesheet\">\r\n");
      out.write("    </head>\r\n");
      out.write("\r\n");
      out.write("    <body style=\"background:#f5f5f5;\">\r\n");
      out.write("        <div class=\"container py-5\">\r\n");
      out.write("            <h2 class=\"mb-4\">Lịch sử đơn hàng của bạn</h2>\r\n");
      out.write("            <div id=\"order-history-list\">\r\n");
      out.write("                <div class=\"text-muted\">Đang tải dữ liệu...</div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <a href=\"index.jsp\" class=\"btn btn-secondary mt-4\">Quay về trang chủ</a>\r\n");
      out.write("            <a href=\"#\" class=\"btn btn-outline-info mt-3\" onclick=\"loadMyComplaints()\">Xem khiếu nại của tôi</a>\r\n");
      out.write("            <div id=\"my-complaints-section\" class=\"mt-4\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- Modal Gửi Khiếu Nại -->\r\n");
      out.write("        <div class=\"modal fade\" id=\"complaintModal\" tabindex=\"-1\" aria-labelledby=\"complaintModalLabel\"\r\n");
      out.write("            aria-hidden=\"true\">\r\n");
      out.write("            <div class=\"modal-dialog\">\r\n");
      out.write("                <form id=\"complaintForm\" class=\"modal-content\">\r\n");
      out.write("                    <div class=\"modal-header\">\r\n");
      out.write("                        <h5 class=\"modal-title\">Gửi khiếu nại đơn hàng</h5>\r\n");
      out.write("                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Đóng\"></button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"modal-body\">\r\n");
      out.write("                        <input type=\"hidden\" id=\"complaintOrderId\">\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"complaintCategory\" class=\"form-label\">Danh mục (tùy chọn)</label>\r\n");
      out.write("                            <select class=\"form-select\" id=\"complaintCategory\">\r\n");
      out.write("                                <option value=\"\">-- Chọn danh mục khiếu nại --</option>\r\n");
      out.write("                                <option value=\"Giao hàng trễ\">Giao hàng trễ</option>\r\n");
      out.write("                                <option value=\"Hỏng sản phẩm\">Hỏng sản phẩm</option>\r\n");
      out.write("                                <option value=\"Thiếu hàng\">Thiếu hàng</option>\r\n");
      out.write("                                <option value=\"Sai hàng\">Sai hàng</option>\r\n");
      out.write("                                <option value=\"Không đúng mô tả\">Không đúng mô tả</option>\r\n");
      out.write("                                <option value=\"Không hoạt động\">Không hoạt động</option>\r\n");
      out.write("                                <option value=\"Chất lượng kém\">Chất lượng kém</option>\r\n");
      out.write("                                <option value=\"Lý do khác\">Lý do khác</option>\r\n");
      out.write("                            </select>\r\n");
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"mb-3\">\r\n");
      out.write("                            <label for=\"complaintContent\" class=\"form-label\">Nội dung khiếu nại *</label>\r\n");
      out.write("                            <textarea class=\"form-control\" id=\"complaintContent\" rows=\"4\" required></textarea>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"modal-footer\">\r\n");
      out.write("                        <button type=\"submit\" class=\"btn btn-primary\">Gửi khiếu nại</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <script>\r\n");
      out.write("            document.addEventListener('DOMContentLoaded', async function () {\r\n");
      out.write("                const orderHistoryList = document.getElementById('order-history-list');\r\n");
      out.write("                try {\r\n");
      out.write("                    const resp = await fetch('/api/orders/history', { headers: { 'Accept': 'application/json' } });\r\n");
      out.write("                    if (!resp.ok) throw new Error('Lỗi xác thực hoặc máy chủ');\r\n");
      out.write("                    const data = await resp.json();\r\n");
      out.write("                    if (!Array.isArray(data)) {\r\n");
      out.write("                        orderHistoryList.innerHTML = '<div class=\"text-danger\">' + (data.message || 'Không lấy được dữ liệu!') + '</div>';\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("                    if (data.length === 0) {\r\n");
      out.write("                        orderHistoryList.innerHTML = '<div class=\"text-warning\">Bạn chưa có đơn hàng nào.</div>';\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("                    let html = '<div class=\"table-responsive\"><table class=\"table table-bordered align-middle order-table\"><thead class=\"table-light\"><tr>' +\r\n");
      out.write("                        '<th>Hình ảnh</th><th>Mã đơn</th><th>Tên sản phẩm</th><th>Ngày đặt</th><th>Trạng thái</th><th>Tổng tiền</th><th>Hành động</th></tr></thead><tbody>';\r\n");
      out.write("                    data.forEach(order => {\r\n");
      out.write("                        const product = order.firstProduct || {};\r\n");
      out.write("                        html += '<tr>' +\r\n");
      out.write("                            '<td style=\"width:70px\">' + (product.image ? '<img src=\"' + product.image + '\" alt=\"Ảnh\" style=\"max-width:60px;max-height:60px;object-fit:cover;\">' : '<span class=\"text-muted\">Không có</span>') + '</td>' +\r\n");
      out.write("                            '<td class=\"fw-bold\">' + order.orderNumber + '</td>' +\r\n");
      out.write("                            '<td>' + (product.name || '<span class=\"text-muted\">Không có</span>') + '</td>' +\r\n");
      out.write("                            '<td>' + (order.orderDate ? new Date(order.orderDate).toLocaleString('vi-VN') : '') + '</td>' +\r\n");
      out.write("                            '<td>' + renderStatus(order.status) + '</td>' +\r\n");
      out.write("                            '<td class=\"text-danger fw-bold\">' + formatCurrency(order.totalAmount) + '₫</td>' +\r\n");
      out.write("                            '<td>' + renderCancelBtn(order) + '</td>' +\r\n");
      out.write("                            '</tr>';\r\n");
      out.write("                    });\r\n");
      out.write("                    html += '</tbody></table></div>';\r\n");
      out.write("                    orderHistoryList.innerHTML = html;\r\n");
      out.write("                } catch (e) {\r\n");
      out.write("                    orderHistoryList.innerHTML = '<div class=\"text-danger\">Lỗi tải dữ liệu!</div>';\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            function formatCurrency(num) {\r\n");
      out.write("                if (!num) return '0';\r\n");
      out.write("                return Number(num).toLocaleString('vi-VN');\r\n");
      out.write("            }\r\n");
      out.write("            function renderStatus(status) {\r\n");
      out.write("                return '<span class=\"order-status ' + status + '\">' + status + '</span>';\r\n");
      out.write("            }\r\n");
      out.write("            function renderCancelBtn(order) {\r\n");
      out.write("                if ([\"PENDING\", \"CONFIRMED\", \"PROCESSING\"].includes(order.status)) {\r\n");
      out.write("                    return '<button class=\"btn btn-danger btn-sm\" onclick=\"cancelOrder(' + order.id + ', this)\"><i class=\"fas fa-trash-alt me-1\"></i>Hủy đơn</button>';\r\n");
      out.write("                } else if (order.status === \"DELIVERED\") {\r\n");
      out.write("                    return '<button class=\"btn btn-warning btn-sm\" onclick=\"sendComplaint(' + order.id + ', this)\"><i class=\"fas fa-exclamation-circle me-1\"></i>Gửi khiếu nại</button>';\r\n");
      out.write("                }\r\n");
      out.write("                return '';\r\n");
      out.write("            }\r\n");
      out.write("            window.cancelOrder = async function (orderId, btn) {\r\n");
      out.write("                if (!confirm('Bạn chắc chắn muốn xóa/hủy đơn hàng này?')) return;\r\n");
      out.write("                btn.disabled = true;\r\n");
      out.write("                btn.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Đang xóa...';\r\n");
      out.write("                try {\r\n");
      out.write("                    const resp = await fetch('/api/orders/' + orderId + '/cancel', { method: 'POST' });\r\n");
      out.write("                    const data = await resp.json();\r\n");
      out.write("                    if (data.success) {\r\n");
      out.write("                        btn.closest('tr').remove();\r\n");
      out.write("                        alert('Đã xóa/hủy đơn hàng thành công!');\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(data.message || 'Không thể xóa!');\r\n");
      out.write("                        btn.disabled = false;\r\n");
      out.write("                        btn.innerHTML = '<i class=\"fas fa-trash-alt me-1\"></i>Hủy đơn';\r\n");
      out.write("                    }\r\n");
      out.write("                } catch (e) {\r\n");
      out.write("                    alert('Lỗi kết nối máy chủ!');\r\n");
      out.write("                    btn.disabled = false;\r\n");
      out.write("                    btn.innerHTML = '<i class=\"fas fa-trash-alt me-1\"></i>Hủy đơn';\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            window.sendComplaint = function (orderId) {\r\n");
      out.write("                document.getElementById('complaintOrderId').value = orderId;\r\n");
      out.write("                document.getElementById('complaintForm').reset();\r\n");
      out.write("                const modal = new bootstrap.Modal(document.getElementById('complaintModal'));\r\n");
      out.write("                modal.show();\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            document.getElementById('complaintForm').addEventListener('submit', async function (e) {\r\n");
      out.write("                e.preventDefault();\r\n");
      out.write("                const orderId = document.getElementById('complaintOrderId').value;\r\n");
      out.write("                const category = document.getElementById('complaintCategory').value.trim();\r\n");
      out.write("                const content = document.getElementById('complaintContent').value.trim();\r\n");
      out.write("\r\n");
      out.write("                if (!content) {\r\n");
      out.write("                    alert('Vui lòng nhập nội dung khiếu nại!');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                try {\r\n");
      out.write("                    const resp = await fetch('/api/complaints/create', {\r\n");
      out.write("                        method: 'POST',\r\n");
      out.write("                        headers: { 'Content-Type': 'application/json' },\r\n");
      out.write("                        body: JSON.stringify({ orderId, category, content })\r\n");
      out.write("                    });\r\n");
      out.write("                    const data = await resp.json();\r\n");
      out.write("                    if (data.success) {\r\n");
      out.write("                        alert('Gửi khiếu nại thành công!');\r\n");
      out.write("                        bootstrap.Modal.getInstance(document.getElementById('complaintModal')).hide();\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(data.message || 'Gửi khiếu nại thất bại!');\r\n");
      out.write("                    }\r\n");
      out.write("                } catch (err) {\r\n");
      out.write("                    alert('Lỗi kết nối máy chủ!');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            async function loadMyComplaints() {\r\n");
      out.write("                const section = document.getElementById('my-complaints-section');\r\n");
      out.write("                section.innerHTML = '<div class=\"text-muted\">Đang tải danh sách khiếu nại...</div>';\r\n");
      out.write("                try {\r\n");
      out.write("                    const resp = await fetch('/api/complaints/my', {\r\n");
      out.write("                        method: 'GET',\r\n");
      out.write("                        headers: {\r\n");
      out.write("                            'Accept': 'application/json'\r\n");
      out.write("                        },\r\n");
      out.write("                        credentials: 'include'\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("                    //const data = await resp.json();\r\n");
      out.write("                    const text = await resp.text();\r\n");
      out.write("                    console.log(\"===> complaints response text:\", text);\r\n");
      out.write("                    let data;\r\n");
      out.write("                    try {\r\n");
      out.write("                        data = JSON.parse(text);\r\n");
      out.write("                    } catch (parseError) {\r\n");
      out.write("                        console.error(\"===> Lỗi JSON.parse:\", parseError);\r\n");
      out.write("                        section.innerHTML = '<div class=\"text-danger\">Phản hồi không hợp lệ!</div>';\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    if (!Array.isArray(data)) {\r\n");
      out.write("                        section.innerHTML = '<div class=\"text-danger\">' + (data.message || 'Không lấy được dữ liệu!') + '</div>';\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    if (data.length === 0) {\r\n");
      out.write("                        section.innerHTML = '<div class=\"text-warning\">Bạn chưa gửi khiếu nại nào.</div>';\r\n");
      out.write("                        return;\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    let html = '<h5 class=\"mt-4\">Các khiếu nại đã gửi</h5><div class=\"table-responsive\"><table class=\"table table-bordered align-middle text-center mt-2\"><thead class=\"table-light\">' +\r\n");
      out.write("                        '<tr><th>Mã đơn</th><th>Danh mục</th><th>Nội dung</th><th>Trạng thái</th><th>Phản hồi</th><th>Thời gian</th></tr></thead><tbody>';\r\n");
      out.write("\r\n");
      out.write("                    data.forEach(c => {\r\n");
      out.write("                        console.log(\"📦 Complaint object:\", c);\r\n");
      out.write("                        html += '<tr>' +\r\n");
      out.write("                            '<td>' + (c.order_number || '-') + '</td>' +\r\n");
      out.write("                            '<td>' + (c.category || '-') + '</td>' +\r\n");
      out.write("                            '<td class=\"text-start\">' + c.content + '</td>' +\r\n");
      out.write("                            '<td><span class=\"badge bg-' + renderStatusColor(c.status) + '\">' + c.status + '</span></td>' +\r\n");
      out.write("                            '<td class=\"text-start\">' + (c.staffResponse || '-') + '</td>' +\r\n");
      out.write("                            '<td>' + c.createdAt + '</td>' +\r\n");
      out.write("                            '</tr>';\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("                    html += '</tbody></table></div>';\r\n");
      out.write("                    section.innerHTML = html;\r\n");
      out.write("                } catch (err) {\r\n");
      out.write("                    section.innerHTML = '<div class=\"text-danger\">Lỗi tải khiếu nại!</div>';\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    </body>\r\n");
      out.write("\r\n");
      out.write("    </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
