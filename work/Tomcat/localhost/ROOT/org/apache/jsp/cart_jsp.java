/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2025-07-16 11:57:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.mycompany.model.CartItem;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.mycompany.model.CartItem");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    List<CartItem> cartItems = (List<CartItem>) request.getAttribute("cartItems");
    if (cartItems == null) cartItems = new ArrayList<>();
    double grandTotal = 0;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Giỏ hàng | LTStore Hobby</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/layout-sizing.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/cart.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    \r\n");
      out.write("<div class=\"cart-container\">\r\n");
      out.write("    <div class=\"cart-title\">Giỏ hàng của bạn</div>\r\n");
      out.write("    <table class=\"cart-table\" width=\"100%\">\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th><input type=\"checkbox\" id=\"selectAllCartItems\"></th>\r\n");
      out.write("                <th>Ảnh</th>\r\n");
      out.write("                <th>Sản phẩm</th>\r\n");
      out.write("                <th>Giá</th>\r\n");
      out.write("                <th>Số lượng</th>\r\n");
      out.write("                <th>Tổng</th>\r\n");
      out.write("                <th>Xóa</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        <!-- Cart rows are rendered dynamically by JavaScript. Do not add any sample rows here. -->\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("    <div class=\"cart-summary\">\r\n");
      out.write("        <strong>Tổng cộng: 0₫</strong>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div style=\"display:flex; justify-content:space-between; margin-top:20px; gap:10px;\">\r\n");
      out.write("        <a href=\"/\" class=\"btn back-btn\" style=\"background:#ccc; color:#222;\">Quay về trang chủ</a>\r\n");
      out.write("        <button class=\"btn update-btn\" id=\"updateCartBtn\">Cập nhật giỏ hàng</button>\r\n");
      out.write("        <form action=\"payment.jsp\" method=\"post\" style=\"display:inline;\">\r\n");
      out.write("            <button class=\"checkout-btn\" type=\"submit\">Thanh toán</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-info-boxes\">\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Vận chuyển miễn phí</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Hóa đơn thanh toán toàn bộ</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Bảo hành bổ sung</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Nếu sản phẩm trùng hoặc thiếu</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">100% Hoàn tiền</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Nếu hãng ngừng sản xuất</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Hotline</div>\r\n");
      out.write("            <div class=\"cart-info-desc cart-hotline\">0343970667</div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("let cartData = [];\r\n");
      out.write("\r\n");
      out.write("function formatCurrency(num) {\r\n");
      out.write("    return num.toLocaleString('vi-VN', {style: 'decimal', maximumFractionDigits: 0}) + '₫';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function renderCart(cartItems, grandTotal) {\r\n");
      out.write("    cartData = cartItems.map(item => ({...item}));\r\n");
      out.write("    const tbody = document.querySelector('.cart-table tbody');\r\n");
      out.write("    let html = '';\r\n");
      out.write("    // Get selectedCartIds from localStorage or default to all\r\n");
      out.write("    let selectedCartIds = [];\r\n");
      out.write("    try {\r\n");
      out.write("        selectedCartIds = JSON.parse(localStorage.getItem('selectedCartIds')) || [];\r\n");
      out.write("    } catch { selectedCartIds = []; }\r\n");
      out.write("    if (cartItems.length === 0) {\r\n");
      out.write("        html = `<tr><td colspan=\"7\">Giỏ hàng của bạn đang trống.</td></tr>`;\r\n");
      out.write("    } else {\r\n");
      out.write("        cartItems.forEach(item => {\r\n");
      out.write("            const total = item.price * item.quantity;\r\n");
      out.write("            const checked = selectedCartIds.length === 0 || selectedCartIds.includes(item.productId) ? 'checked' : '';\r\n");
      out.write("            html += `<tr>\r\n");
      out.write("                <td><input type=\"checkbox\" class=\"cart-item-checkbox\" data-id=\"${item.productId}\" ${checked}></td>\r\n");
      out.write("                <td><img class=\"cart-img\" src=\"${item.imageUrl}\" alt=\"${item.productName}\"></td>\r\n");
      out.write("                <td style=\"text-align:left; font-weight:500;\">${item.productName}</td>\r\n");
      out.write("                <td>${formatCurrency(item.price)}</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <button class=\"qty-btn\" type=\"button\" data-action=\"decrease\" data-id=\"${item.productId}\">-</button>\r\n");
      out.write("                    <input class=\"qty-input\" type=\"text\" value=\"${item.quantity}\" readonly data-id=\"${item.productId}\">\r\n");
      out.write("                    <button class=\"qty-btn\" type=\"button\" data-action=\"increase\" data-id=\"${item.productId}\">+</button>\r\n");
      out.write("                </td>\r\n");
      out.write("                <td>${formatCurrency(total)}</td>\r\n");
      out.write("                <td><button class=\"remove-btn\" type=\"button\" data-action=\"remove\" data-id=\"${item.productId}\">Xóa</button></td>\r\n");
      out.write("            </tr>`;\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("    tbody.innerHTML = html;\r\n");
      out.write("    \r\n");
      out.write("    // Tính lại tổng tiền dựa trên sản phẩm được chọn\r\n");
      out.write("    recalcGrandTotal();\r\n");
      out.write("    \r\n");
      out.write("    document.querySelector('.checkout-btn').disabled = cartItems.length === 0;\r\n");
      out.write("    // Set select all checkbox state\r\n");
      out.write("    const selectAll = document.getElementById('selectAllCartItems');\r\n");
      out.write("    if (selectAll) {\r\n");
      out.write("        const allIds = cartItems.map(i => i.productId);\r\n");
      out.write("        selectAll.checked = selectedCartIds.length === 0 || allIds.every(id => selectedCartIds.includes(id));\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function recalcGrandTotal() {\r\n");
      out.write("    let total = 0;\r\n");
      out.write("    let selectedCartIds = [];\r\n");
      out.write("    \r\n");
      out.write("    try {\r\n");
      out.write("        selectedCartIds = JSON.parse(localStorage.getItem('selectedCartIds')) || [];\r\n");
      out.write("    } catch { selectedCartIds = []; }\r\n");
      out.write("    \r\n");
      out.write("    // Nếu không có sản phẩm nào được chọn, tính tất cả\r\n");
      out.write("    if (selectedCartIds.length === 0) {\r\n");
      out.write("        cartData.forEach(item => {\r\n");
      out.write("            total += item.price * item.quantity;\r\n");
      out.write("        });\r\n");
      out.write("    } else {\r\n");
      out.write("        // Chỉ tính tổng những sản phẩm được chọn\r\n");
      out.write("        cartData.forEach(item => {\r\n");
      out.write("            if (selectedCartIds.includes(item.productId)) {\r\n");
      out.write("                total += item.price * item.quantity;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    document.querySelector('.cart-summary strong').textContent = 'Tổng cộng: ' + formatCurrency(total);\r\n");
      out.write("    document.querySelector('.checkout-btn').disabled = cartData.length === 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    fetch('/api/cart')\r\n");
      out.write("        .then(res => {\r\n");
      out.write("            if (res.status === 401) return {cartItems: [], grandTotal: 0};\r\n");
      out.write("            return res.json();\r\n");
      out.write("        })\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            renderCart(data.cartItems || [], data.grandTotal || 0);\r\n");
      out.write("        })\r\n");
      out.write("        .catch(() => {\r\n");
      out.write("            renderCart([], 0);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("    // Checkbox selection logic\r\n");
      out.write("    document.querySelector('.cart-table').addEventListener('change', function(e) {\r\n");
      out.write("        if (e.target.classList.contains('cart-item-checkbox')) {\r\n");
      out.write("            // Update selectedCartIds in localStorage\r\n");
      out.write("            const checkboxes = document.querySelectorAll('.cart-item-checkbox');\r\n");
      out.write("            const selected = Array.from(checkboxes).filter(cb => cb.checked).map(cb => parseInt(cb.getAttribute('data-id')));\r\n");
      out.write("            localStorage.setItem('selectedCartIds', JSON.stringify(selected));\r\n");
      out.write("            // Update select all checkbox\r\n");
      out.write("            const selectAll = document.getElementById('selectAllCartItems');\r\n");
      out.write("            if (selectAll) {\r\n");
      out.write("                const allIds = cartData.map(i => i.productId);\r\n");
      out.write("                selectAll.checked = selected.length === allIds.length;\r\n");
      out.write("            }\r\n");
      out.write("            // Tính lại tổng tiền\r\n");
      out.write("            recalcGrandTotal();\r\n");
      out.write("        }\r\n");
      out.write("        if (e.target.id === 'selectAllCartItems') {\r\n");
      out.write("            const checked = e.target.checked;\r\n");
      out.write("            const checkboxes = document.querySelectorAll('.cart-item-checkbox');\r\n");
      out.write("            checkboxes.forEach(cb => { cb.checked = checked; });\r\n");
      out.write("            const allIds = cartData.map(i => i.productId);\r\n");
      out.write("            localStorage.setItem('selectedCartIds', checked ? JSON.stringify(allIds) : JSON.stringify([]));\r\n");
      out.write("            // Tính lại tổng tiền\r\n");
      out.write("            recalcGrandTotal();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.querySelector('.cart-table').addEventListener('click', function(e) {\r\n");
      out.write("        const btn = e.target;\r\n");
      out.write("        if (btn.classList.contains('qty-btn')) {\r\n");
      out.write("            const id = parseInt(btn.getAttribute('data-id'));\r\n");
      out.write("            const action = btn.getAttribute('data-action');\r\n");
      out.write("            const item = cartData.find(i => i.productId === id);\r\n");
      out.write("            if (!item) return;\r\n");
      out.write("            if (action === 'increase') item.quantity++;\r\n");
      out.write("            if (action === 'decrease') {\r\n");
      out.write("                if (item.quantity > 1) item.quantity--;\r\n");
      out.write("            }\r\n");
      out.write("            renderCart(cartData, cartData.reduce((sum, i) => sum + i.price * i.quantity, 0));\r\n");
      out.write("        }\r\n");
      out.write("        if (btn.classList.contains('remove-btn')) {\r\n");
      out.write("            const id = parseInt(btn.getAttribute('data-id'));\r\n");
      out.write("            // Gọi API xóa sản phẩm khỏi DB\r\n");
      out.write("            fetch('/api/cart/remove', {\r\n");
      out.write("                method: 'POST',\r\n");
      out.write("                headers: {'Content-Type': 'application/json'},\r\n");
      out.write("                body: JSON.stringify({productId: id})\r\n");
      out.write("            })\r\n");
      out.write("            .then(res => res.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                if (data.success) {\r\n");
      out.write("                    // Sau khi xóa thành công, reload lại cart từ server\r\n");
      out.write("                    fetch('/api/cart')\r\n");
      out.write("                        .then(res => res.json())\r\n");
      out.write("                        .then(newData => {\r\n");
      out.write("                            renderCart(newData.cartItems || [], newData.grandTotal || 0);\r\n");
      out.write("                        });\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert('Không thể xóa sản phẩm khỏi giỏ hàng!');\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(() => {\r\n");
      out.write("                alert('Có lỗi khi xóa sản phẩm!');\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.getElementById('updateCartBtn').addEventListener('click', function() {\r\n");
      out.write("        // Debug: log cartData trước khi gửi lên server\r\n");
      out.write("        console.log('Cart data gửi lên server:', cartData);\r\n");
      out.write("        fetch('/api/cart/update', {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: {'Content-Type': 'application/json'},\r\n");
      out.write("            body: JSON.stringify({items: cartData.map(i => ({productId: i.productId, quantity: i.quantity}))})\r\n");
      out.write("        })\r\n");
      out.write("        .then(res => res.json())\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            // Sau khi cập nhật thành công, reload lại cart từ server để đảm bảo đồng bộ\r\n");
      out.write("            fetch('/api/cart')\r\n");
      out.write("                .then(res => res.json())\r\n");
      out.write("                .then(newData => {\r\n");
      out.write("                    renderCart(newData.cartItems || [], newData.grandTotal || 0);\r\n");
      out.write("                    alert('Cập nhật giỏ hàng thành công!');\r\n");
      out.write("                });\r\n");
      out.write("        })\r\n");
      out.write("        .catch(() => {\r\n");
      out.write("            alert('Có lỗi khi cập nhật giỏ hàng!');\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Checkout button: set selectedCartIds before submitting\r\n");
      out.write("    const checkoutBtn = document.querySelector('.checkout-btn');\r\n");
      out.write("    if (checkoutBtn) {\r\n");
      out.write("        checkoutBtn.addEventListener('click', function(e) {\r\n");
      out.write("            // Get selected product IDs\r\n");
      out.write("            const checkboxes = document.querySelectorAll('.cart-item-checkbox');\r\n");
      out.write("            const selected = Array.from(checkboxes).filter(cb => cb.checked).map(cb => parseInt(cb.getAttribute('data-id')));\r\n");
      out.write("            if (selected.length === 0) {\r\n");
      out.write("                e.preventDefault();\r\n");
      out.write("                alert('Vui lòng chọn ít nhất một sản phẩm để thanh toán!');\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            localStorage.setItem('selectedCartIds', JSON.stringify(selected));\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// Lắng nghe sự kiện khi người dùng quay lại trang (sau khi thanh toán)\r\n");
      out.write("window.addEventListener('focus', function() {\r\n");
      out.write("    // Reload giỏ hàng để cập nhật những sản phẩm đã bị xóa sau thanh toán\r\n");
      out.write("    fetch('/api/cart')\r\n");
      out.write("        .then(res => {\r\n");
      out.write("            if (res.status === 401) return {cartItems: [], grandTotal: 0};\r\n");
      out.write("            return res.json();\r\n");
      out.write("        })\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            renderCart(data.cartItems || [], data.grandTotal || 0);\r\n");
      out.write("        })\r\n");
      out.write("        .catch(() => {\r\n");
      out.write("            renderCart([], 0);\r\n");
      out.write("        });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// Cũng reload khi trang được load lần đầu hoặc refresh\r\n");
      out.write("window.addEventListener('pageshow', function(event) {\r\n");
      out.write("    if (event.persisted) {\r\n");
      out.write("        // Trang được load từ cache, reload giỏ hàng\r\n");
      out.write("        fetch('/api/cart')\r\n");
      out.write("            .then(res => {\r\n");
      out.write("                if (res.status === 401) return {cartItems: [], grandTotal: 0};\r\n");
      out.write("                return res.json();\r\n");
      out.write("            })\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                renderCart(data.cartItems || [], data.grandTotal || 0);\r\n");
      out.write("            })\r\n");
      out.write("            .catch(() => {\r\n");
      out.write("                renderCart([], 0);\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
