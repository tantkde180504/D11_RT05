/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2025-06-20 18:34:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.mycompany.CartItem;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("com.mycompany.CartItem");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    // Lấy cartItems từ model (Spring Controller truyền qua request attribute)
    List<CartItem> cartItems = (List<CartItem>) request.getAttribute("cartItems");
    if (cartItems == null) cartItems = new ArrayList<>();
    double grandTotal = 0;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Giỏ hàng | LTStore Hobby</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/cart.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"cart-container\">\r\n");
      out.write("    <div class=\"cart-title\">Giỏ hàng của bạn</div>\r\n");
      out.write("    <form action=\"UpdateCartServlet\" method=\"post\">\r\n");
      out.write("        <table class=\"cart-table\" width=\"100%\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Ảnh</th>\r\n");
      out.write("                    <th>Sản phẩm</th>\r\n");
      out.write("                    <th>Giá</th>\r\n");
      out.write("                    <th>Số lượng</th>\r\n");
      out.write("                    <th>Tổng</th>\r\n");
      out.write("                    <th>Xóa</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("            ");
 for (CartItem item : cartItems) {
                double total = item.getPrice() * item.getQuantity();
                grandTotal += total;
            
      out.write("<tr>\r\n");
      out.write("                    <td><img class=\"cart-img\" src=\"");
      out.print(item.getImageUrl());
      out.write("\" alt=\"");
      out.print(item.getProductName());
      out.write("\"></td>\r\n");
      out.write("                    <td style=\"text-align:left; font-weight:500;\"> ");
      out.print(item.getProductName());
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print(String.format("%,.0f", item.getPrice()));
      out.write("₫</td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <button class=\"qty-btn\" type=\"submit\" name=\"action\" value=\"decrease-");
      out.print(item.getProductId());
      out.write("\">-</button>\r\n");
      out.write("                        <input class=\"qty-input\" type=\"text\" name=\"quantity-");
      out.print(item.getProductId());
      out.write("\" value=\"");
      out.print(item.getQuantity());
      out.write("\" readonly>\r\n");
      out.write("                        <button class=\"qty-btn\" type=\"submit\" name=\"action\" value=\"increase-");
      out.print(item.getProductId());
      out.write("\">+</button>\r\n");
      out.write("                    </td>\r\n");
      out.write("                    <td>");
      out.print(String.format("%,.0f", total));
      out.write("₫</td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <button class=\"remove-btn\" type=\"submit\" name=\"action\" value=\"remove-");
      out.print(item.getProductId());
      out.write("\">Xóa</button>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            ");
 } 
 if (cartItems.isEmpty()) { 
      out.write("<tr>\r\n");
      out.write("                    <td colspan=\"6\">Giỏ hàng của bạn đang trống.</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            ");
 } 
      out.write("</tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </form>\r\n");
      out.write("    <div class=\"cart-summary\">\r\n");
      out.write("        <strong>Tổng cộng: ");
      out.print(String.format("%,.0f", grandTotal));
      out.write("₫</strong>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div style=\"text-align:right; margin-top:20px;\">\r\n");
      out.write("        <form action=\"CheckoutServlet\" method=\"post\">\r\n");
      out.write("            <button class=\"checkout-btn\" type=\"submit\" ");
      out.print(cartItems.isEmpty() ? "disabled" : "");
      out.write(">Thanh toán</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-info-boxes\">\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Vận chuyển miễn phí</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Hóa đơn thanh toán toàn bộ</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Bảo hành bổ sung</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Nếu sản phẩm trùng hoặc thiếu</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">100% Hoàn tiền</div>\r\n");
      out.write("            <div class=\"cart-info-desc\">Nếu hãng ngừng sản xuất</div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cart-info-box\">\r\n");
      out.write("            <div class=\"cart-info-title\">Hotline</div>\r\n");
      out.write("            <div class=\"cart-info-desc cart-hotline\">0343970667</div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-policy-links\">\r\n");
      out.write("        <a href=\"https://ltstorehobby.com/chinh-sach\" target=\"_blank\">Chính sách bảo mật</a> |\r\n");
      out.write("        <a href=\"https://ltstorehobby.com/chinh-sach\" target=\"_blank\">Chính sách vận chuyển</a> |\r\n");
      out.write("        <a href=\"https://ltstorehobby.com/chinh-sach\" target=\"_blank\">Chính sách đổi trả</a> |\r\n");
      out.write("        <a href=\"https://ltstorehobby.com/dieu-khoan\" target=\"_blank\">Quy định sử dụng</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-policy-links\" style=\"margin-top:10px;\">\r\n");
      out.write("        <a href=\"https://www.facebook.com/LTSTORE24/\" target=\"_blank\">Facebook</a> |\r\n");
      out.write("        <a href=\"https://shope.ee/7pS5Ry0Zv9\" target=\"_blank\">Shopee</a> |\r\n");
      out.write("        <a href=\"#\" target=\"_blank\">Tiktok</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-payment-icons\" style=\"margin-top:18px;\">\r\n");
      out.write("        <img src=\"img/sale.png\" alt=\"Payment 1\">\r\n");
      out.write("        <img src=\"img/logo.png\" alt=\"Payment 2\">\r\n");
      out.write("        <!-- Thêm các icon thanh toán khác nếu có -->\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cart-footer\">\r\n");
      out.write("        © Bản quyền thuộc về LTStore | Cung cấp bởi Sapo\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    function formatCurrency(num) {\r\n");
      out.write("        return num.toLocaleString('vi-VN', {style: 'decimal', maximumFractionDigits: 0}) + '₫';\r\n");
      out.write("    }\r\n");
      out.write("    function renderCart(cartItems, grandTotal) {\r\n");
      out.write("        const tbody = document.querySelector('.cart-table tbody');\r\n");
      out.write("        let html = '';\r\n");
      out.write("        if (cartItems.length === 0) {\r\n");
      out.write("            html = `<tr><td colspan=\"6\">Giỏ hàng của bạn đang trống.</td></tr>`;\r\n");
      out.write("        } else {\r\n");
      out.write("            cartItems.forEach(item => {\r\n");
      out.write("                const total = item.price * item.quantity;\r\n");
      out.write("                html += `<tr>\r\n");
      out.write("                    <td><img class=\"cart-img\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.imageUrl}\" alt=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.productName}\"></td>\r\n");
      out.write("                    <td style=\"text-align:left; font-weight:500;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.productName}</td>\r\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{formatCurrency(item.price)}</td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <button class=\"qty-btn\" data-action=\"decrease\" data-id=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.productId}\">-</button>\r\n");
      out.write("                        <input class=\"qty-input\" type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.quantity}\" readonly>\r\n");
      out.write("                        <button class=\"qty-btn\" data-action=\"increase\" data-id=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.productId}\">+</button>\r\n");
      out.write("                    </td>\r\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{formatCurrency(total)}</td>\r\n");
      out.write("                    <td><button class=\"remove-btn\" data-action=\"remove\" data-id=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${'$'}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("{item.productId}\">Xóa</button></td>\r\n");
      out.write("                </tr>`;\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("        tbody.innerHTML = html;\r\n");
      out.write("        document.querySelector('.cart-summary strong').textContent = 'Tổng cộng: ' + formatCurrency(grandTotal);\r\n");
      out.write("        document.querySelector('.checkout-btn').disabled = cartItems.length === 0;\r\n");
      out.write("    }\r\n");
      out.write("    fetch('/api/cart')\r\n");
      out.write("        .then(res => {\r\n");
      out.write("            if (res.status === 401) return {cartItems: [], grandTotal: 0};\r\n");
      out.write("            return res.json();\r\n");
      out.write("        })\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            renderCart(data.cartItems || [], data.grandTotal || 0);\r\n");
      out.write("        })\r\n");
      out.write("        .catch(() => {\r\n");
      out.write("            renderCart([], 0);\r\n");
      out.write("        });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
