document.addEventListener("DOMContentLoaded", function () {
  const form = document.querySelector("#addStaffForm");
  if (form) {
    form.addEventListener("submit", function (e) {
      e.preventDefault();

      // Validate all required fields
      const requiredFields = [
        { name: "firstName", label: "H·ªç" },
        { name: "lastName", label: "T√™n" },
        { name: "email", label: "Email" },
        { name: "password", label: "M·∫≠t kh·∫©u" },
        { name: "phone", label: "S·ªë ƒëi·ªán tho·∫°i" },
        { name: "dateOfBirth", label: "Ng√†y sinh" },
        { name: "gender", label: "Gi·ªõi t√≠nh" },
        { name: "address", label: "ƒê·ªãa ch·ªâ" }
      ];
      let missing = [];
      requiredFields.forEach(f => {
        const value = form.querySelector(`[name="${f.name}"]`).value;
        if (!value || value.trim() === "") missing.push(f.label);
      });
      if (missing.length > 0) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng: " + missing.join(", "));
        return;
      }

      // Validate email ph·∫£i ch·ª©a @
      const emailValue = form.querySelector('input[name="email"]').value;
      if (!emailValue.includes("@")) {
        alert("Email ph·∫£i ch·ª©a k√Ω t·ª± @");
        return;
      }

      const data = {
        firstName: form.querySelector('input[name="firstName"]').value,
        lastName: form.querySelector('input[name="lastName"]').value,
        email: form.querySelector('input[name="email"]').value,
        password: form.querySelector('input[name="password"]').value,
        phone: form.querySelector('input[name="phone"]').value,
        dateOfBirth: form.querySelector('input[name="dateOfBirth"]').value,
        gender: form.querySelector('select[name="gender"]').value,
        address: form.querySelector('input[name="address"]').value
      };

      fetch(apiUrl("/api/staffs/create"), {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      })
        .then(res => {
          if (!res.ok) throw res;
          return res.json();
        })
        .then(result => {
          alert("‚úÖ T·∫°o nh√¢n vi√™n th√†nh c√¥ng!");
          const roleLabel = result.role === "STAFF" ? "Nh√¢n vi√™n" : result.role;
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${result.id}</td>
            <td>${result.firstName} ${result.lastName}</td>
            <td>${result.email}</td>
            <td>${result.phone || ''}</td>
            <td>${roleLabel}</td>
            <td>${result.createdAtFormatted || ""}</td>
            <td><span class="badge bg-success">Ho·∫°t ƒë·ªông</span></td>
            <td>
              <button class="btn btn-sm btn-warning" onclick="openEditModal(${result.id})"><i class="fas fa-edit"></i></button>
              <button class="btn btn-sm btn-danger" onclick="deleteStaff(${result.id})"><i class="fas fa-trash"></i></button>
            </td>
          `;
          document.querySelector("#staffTableBody").appendChild(row);
          form.reset();
          bootstrap.Modal.getInstance(document.getElementById("addStaffModal")).hide();
        })
        .catch(err => {
          if (err.text) {
            err.text().then(msg => alert("‚ùå L·ªói: " + msg));
          } else {
            alert("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o nh√¢n vi√™n.");
            console.error(err);
          }
        });
    });
  }

  const staffTab = document.querySelector('a[href="#employees"]');
  if (staffTab) {
    staffTab.addEventListener("shown.bs.tab", function () {
      console.log("üü¢ Tab Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c m·ªü, g·ªçi loadStaffList()");
      loadStaffList();
    });
  }

  const activeTab = document.querySelector('.tab-pane.active#employees');
  if (activeTab) {
    console.log("üü¢ Tab Nh√¢n vi√™n ƒëang active s·∫µn, g·ªçi loadStaffList()");
    loadStaffList();
  }
});

// ƒê·ªïi base URL API cho ƒë√∫ng port backend
const API_BASE = "http://localhost:8081";

function apiUrl(path) {
  if (path.startsWith("/")) return API_BASE + path;
  return API_BASE + "/" + path;
}

function loadStaffList() {
  console.log("‚úÖ H√†m loadStaffList ƒë√£ ƒë∆∞·ª£c g·ªçi");
  fetch(apiUrl("/api/staffs/list"))
    .then(res => {
      if (!res.ok) throw new Error("L·ªói HTTP");
      return res.json();
    })
    .then(data => {
      console.log("üì¶ D·ªØ li·ªáu tr·∫£ v·ªÅ:", data);
      const tbody = document.getElementById("staffTableBody");
      tbody.innerHTML = "";
      data.forEach(staff => {
        const fullName = `${staff.firstName} ${staff.lastName}`;
        const joinDate = staff.createdAtFormatted || "";
        // Log id khi render n√∫t x√≥a
        console.log("[DEBUG] Render staff row, id:", staff.id, staff);
        let deleteBtn = '';
        if (staff.id !== undefined && staff.id !== null && staff.id !== "" && !isNaN(staff.id)) {
          deleteBtn = `<button class=\"btn btn-sm btn-danger\" onclick=\"deleteStaff(${staff.id})\"><i class=\"fas fa-trash\"></i></button>`;
        } else {
          console.warn("[WARN] Kh√¥ng render n√∫t x√≥a v√¨ staff kh√¥ng c√≥ id h·ª£p l·ªá:", staff);
        }
        const row = `
          <tr>
            <td>${staff.id || ''}</td>
            <td>${fullName}</td>
            <td>${staff.email}</td>
            <td>${staff.phone || ''}</td>
            <td>Nh√¢n vi√™n</td>
            <td>${joinDate}</td>
            <td><span class=\"badge bg-success\">Ho·∫°t ƒë·ªông</span></td>
            <td>
              <button class=\"btn btn-sm btn-warning\" onclick=\"openEditModal(${staff.id})\"><i class=\"fas fa-edit\"></i></button>
              ${deleteBtn}
            </td>
          </tr>
        `;
        tbody.insertAdjacentHTML("beforeend", row);
      });
    })
    .catch(err => {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:", err);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n. Ki·ªÉm tra API /api/staffs/list ho·∫∑c xem log backend.");
    });
}

// ‚úÖ G·∫Øn c√°c h√†m v√†o ph·∫°m vi global
window.openEditModal = function (id) {
  fetch(apiUrl(`/api/staffs/${id}`))
    .then(async res => {
      if (!res.ok) {
        let msg = "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID: " + id;
        try {
          const errJson = await res.json();
          if (errJson && errJson.message) msg = errJson.message;
        } catch {}
        // Reload l·∫°i danh s√°ch n·∫øu kh√¥ng t√¨m th·∫•y nh√¢n vi√™n
        alert(msg + "\nDanh s√°ch s·∫Ω ƒë∆∞·ª£c l√†m m·ªõi.");
        loadStaffList();
        return Promise.reject(new Error(msg));
      }
      return res.json();
    })
    .then(data => {
      if (!data || !data.id) {
        alert("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.\n" + JSON.stringify(data));
        loadStaffList();
        return;
      }
      document.getElementById("editId").value = data.id;
      document.getElementById("editFirstName").value = data.firstName || "";
      document.getElementById("editLastName").value = data.lastName || "";
      document.getElementById("editEmail").value = data.email || "";
      document.getElementById("editPhone").value = data.phone || "";
      
      // X·ª≠ l√Ω ng√†y sinh - convert t·ª´ LocalDate sang format yyyy-MM-dd n·∫øu c·∫ßn
      let dateOfBirth = "";
      if (data.dateOfBirth) {
        // N·∫øu ƒë√£ l√† format yyyy-MM-dd th√¨ d√πng lu√¥n
        if (data.dateOfBirth.match(/^\d{4}-\d{2}-\d{2}$/)) {
          dateOfBirth = data.dateOfBirth;
        } else {
          // N·∫øu l√† format kh√°c, th·ª≠ parse v√† convert
          try {
            const date = new Date(data.dateOfBirth);
            if (!isNaN(date)) {
              dateOfBirth = date.toISOString().split('T')[0];
            }
          } catch (e) {
            console.warn("Kh√¥ng th·ªÉ parse ng√†y sinh:", data.dateOfBirth);
          }
        }
      }
      document.getElementById("editDateOfBirth").value = dateOfBirth;
      
      document.getElementById("editGender").value = data.gender || "";
      document.getElementById("editAddress").value = data.address || "";
      const modal = new bootstrap.Modal(document.getElementById("editStaffModal"));
      modal.show();
    })
    .catch(err => {
      if (err && err.message && err.message.startsWith("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n")) return;
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu nh√¢n vi√™n:", err);
      alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√¢n vi√™n.\n" + err.message);
    });
};

window.saveStaffUpdate = function () {
  const id = document.getElementById("editId").value;
  
  // Validate required fields
  const requiredFields = [
    { id: "editFirstName", label: "H·ªç" },
    { id: "editLastName", label: "T√™n" },
    { id: "editEmail", label: "Email" },
    { id: "editPhone", label: "S·ªë ƒëi·ªán tho·∫°i" },
    { id: "editDateOfBirth", label: "Ng√†y sinh" },
    { id: "editGender", label: "Gi·ªõi t√≠nh" },
    { id: "editAddress", label: "ƒê·ªãa ch·ªâ" }
  ];
  
  let missing = [];
  requiredFields.forEach(field => {
    const value = document.getElementById(field.id).value;
    if (!value || value.trim() === "") {
      missing.push(field.label);
    }
  });
  
  if (missing.length > 0) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng: " + missing.join(", "));
    return;
  }
  
  // ƒê·∫£m b·∫£o format ng√†y ƒë√∫ng yyyy-MM-dd
  let dateOfBirth = document.getElementById("editDateOfBirth").value;
  console.log("Original dateOfBirth:", dateOfBirth);
  
  // N·∫øu ƒë√£ l√† format yyyy-MM-dd th√¨ ok, n·∫øu kh√¥ng th√¨ convert
  if (!dateOfBirth.match(/^\d{4}-\d{2}-\d{2}$/)) {
    console.warn("Invalid date format, trying to convert:", dateOfBirth);
    try {
      const date = new Date(dateOfBirth);
      if (!isNaN(date)) {
        dateOfBirth = date.toISOString().split('T')[0];
        console.log("Converted dateOfBirth:", dateOfBirth);
      } else {
        alert("Format ng√†y sinh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.");
        return;
      }
    } catch (e) {
      alert("Format ng√†y sinh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.");
      return;
    }
  }
  
  const data = {
    firstName: document.getElementById("editFirstName").value.trim(),
    lastName: document.getElementById("editLastName").value.trim(),
    email: document.getElementById("editEmail").value.trim(),
    phone: document.getElementById("editPhone").value.trim(),
    dateOfBirth: dateOfBirth,
    gender: document.getElementById("editGender").value,
    address: document.getElementById("editAddress").value.trim()
  };

  // Validate email ph·∫£i ch·ª©a @
  if (!data.email.includes("@")) {
    alert("Email ph·∫£i ch·ª©a k√Ω t·ª± @");
    return;
  }

  console.log("D·ªØ li·ªáu g·ª≠i l√™n server:", data);

  fetch(apiUrl(`/api/staffs/${id}`), {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data)
  })
  .then(async res => {
    console.log("Response status:", res.status);
    if (res.ok) {
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng");
      bootstrap.Modal.getInstance(document.getElementById("editStaffModal")).hide();
      loadStaffList(); // Reload danh s√°ch thay v√¨ reload to√†n trang
    } else {
      // X·ª≠ l√Ω l·ªói chi ti·∫øt
      let errorMessage = "L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n";
      try {
        const errorData = await res.json();
        if (errorData.message) {
          errorMessage = errorData.message;
        }
      } catch (e) {
        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, l·∫•y text
        try {
          const errorText = await res.text();
          if (errorText) {
            errorMessage = errorText;
          }
        } catch (e2) {
          errorMessage = `L·ªói HTTP ${res.status}: ${res.statusText}`;
        }
      }
      alert(errorMessage);
      console.error("Chi ti·∫øt l·ªói:", res);
    }
  })
  .catch(err => {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n:", err);
    alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
  });
};

window.deleteStaff = function (id) {
  console.log("[DEBUG] G·ªçi deleteStaff v·ªõi id:", id, typeof id);
  if (!id || isNaN(id)) {
    alert("ID nh√¢n vi√™n kh√¥ng h·ª£p l·ªá! Kh√¥ng th·ªÉ x√≥a.");
    console.warn("[WARN] deleteStaff ƒë∆∞·ª£c g·ªçi v·ªõi id kh√¥ng h·ª£p l·ªá:", id);
    return;
  }
  if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° nh√¢n vi√™n n√†y?")) {
    fetch(apiUrl(`/api/staffs/${id}`), {
      method: "DELETE"
    }).then(res => {
      if (res.ok) {
        alert("Xo√° th√†nh c√¥ng!");
        loadStaffList();
      } else {
        alert("Xo√° th·∫•t b·∫°i!");
      }
    });
  }
};
